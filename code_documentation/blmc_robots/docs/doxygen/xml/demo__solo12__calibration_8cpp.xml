<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="demo__solo12__calibration_8cpp" kind="file" language="C++">
    <compoundname>demo_solo12_calibration.cpp</compoundname>
    <includes refid="solo12_8hpp" local="yes">blmc_robots/solo12.hpp</includes>
    <includes refid="common__demo__header_8hpp" local="yes">common_demo_header.hpp</includes>
    <incdepgraph>
      <node id="634">
        <label>atomic</label>
      </node>
      <node id="636">
        <label>real_time_tools/timer.hpp</label>
      </node>
      <node id="630">
        <label>blmc_robots/common_header.hpp</label>
        <link refid="common__header_8hpp"/>
        <childnode refid="631" relation="include">
        </childnode>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="635" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
        <childnode refid="639" relation="include">
        </childnode>
        <childnode refid="640" relation="include">
        </childnode>
      </node>
      <node id="647">
        <label>blmc_robots/mathematics/polynome.hxx</label>
        <link refid="polynome_8hxx_source"/>
        <childnode refid="644" relation="include">
        </childnode>
        <childnode refid="648" relation="include">
        </childnode>
        <childnode refid="646" relation="include">
        </childnode>
      </node>
      <node id="638">
        <label>real_time_tools/thread.hpp</label>
      </node>
      <node id="645">
        <label>stdexcept</label>
      </node>
      <node id="632">
        <label>Eigen/Eigen</label>
      </node>
      <node id="646">
        <label>blmc_robots/mathematics/polynome.hpp</label>
        <link refid="polynome_8hpp"/>
        <childnode refid="643" relation="include">
        </childnode>
        <childnode refid="647" relation="include">
        </childnode>
      </node>
      <node id="649">
        <label>common_demo_header.hpp</label>
        <link refid="common__demo__header_8hpp"/>
        <childnode refid="650" relation="include">
        </childnode>
      </node>
      <node id="629">
        <label>blmc_drivers/devices/spi_motor_board.hpp</label>
      </node>
      <node id="637">
        <label>real_time_tools/spinner.hpp</label>
      </node>
      <node id="635">
        <label>real_time_tools/iostream.hpp</label>
      </node>
      <node id="628">
        <label>blmc_robots/solo12.hpp</label>
        <link refid="solo12_8hpp"/>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="641" relation="include">
        </childnode>
      </node>
      <node id="648">
        <label>vector</label>
      </node>
      <node id="633">
        <label>signal.h</label>
      </node>
      <node id="643">
        <label>array</label>
      </node>
      <node id="631">
        <label>yaml_cpp_catkin/yaml_cpp_fwd.hpp</label>
      </node>
      <node id="642">
        <label>math.h</label>
      </node>
      <node id="641">
        <label>blmc_robots/blmc_joint_module.hpp</label>
        <link refid="blmc__joint__module_8hpp"/>
        <childnode refid="642" relation="include">
        </childnode>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="643" relation="include">
        </childnode>
        <childnode refid="644" relation="include">
        </childnode>
        <childnode refid="645" relation="include">
        </childnode>
        <childnode refid="639" relation="include">
        </childnode>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="646" relation="include">
        </childnode>
      </node>
      <node id="644">
        <label>iostream</label>
      </node>
      <node id="650">
        <label>blmc_robots/common_programs_header.hpp</label>
        <link refid="common__programs__header_8hpp_source"/>
        <childnode refid="630" relation="include">
        </childnode>
      </node>
      <node id="640">
        <label>blmc_drivers/devices/analog_sensor.hpp</label>
      </node>
      <node id="639">
        <label>blmc_drivers/devices/motor.hpp</label>
      </node>
      <node id="627">
        <label>demos/demo_solo12_calibration.cpp</label>
        <link refid="demo_solo12_calibration.cpp"/>
        <childnode refid="628" relation="include">
        </childnode>
        <childnode refid="649" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="demo__solo12__calibration_8cpp_1ab9d429cb6b4af0823d111594c5792593" prot="public" static="no">
        <type><ref refid="structblmc__robots_1_1ThreadCalibrationData" kindref="compound">ThreadCalibrationData</ref>&lt; <ref refid="classblmc__robots_1_1Solo12" kindref="compound">Solo12</ref> &gt;</type>
        <definition>typedef ThreadCalibrationData&lt;Solo12&gt; ThreadCalibrationData_t</definition>
        <argsstring></argsstring>
        <name>ThreadCalibrationData_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_solo12_calibration.cpp" line="17" column="1" bodyfile="demos/demo_solo12_calibration.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="demo__solo12__calibration_8cpp_1a4061cd7d86b33a32f45bdce36ac5dea2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>THREAD_FUNCTION_RETURN_TYPE</type>
        <definition>static THREAD_FUNCTION_RETURN_TYPE control_loop</definition>
        <argsstring>(void *thread_data_void_ptr)</argsstring>
        <name>control_loop</name>
        <param>
          <type>void *</type>
          <declname>thread_data_void_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_solo12_calibration.cpp" line="20" column="1" bodyfile="demos/demo_solo12_calibration.cpp" bodystart="20" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="demo__solo12__calibration_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_solo12_calibration.cpp" line="33" column="1" bodyfile="demos/demo_solo12_calibration.cpp" bodystart="33" bodyend="61"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Small demo to test the calibration on the real robot. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Maximilien Naveau (<ulink url="mailto:maximilien.naveau@gmail.com">maximilien.naveau@gmail.com</ulink>) </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>2019-11-08</para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="solo12_8hpp" kindref="compound">blmc_robots/solo12.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common__demo__header_8hpp" kindref="compound">common_demo_header.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceblmc__robots" kindref="compound">blmc_robots</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structblmc__robots_1_1ThreadCalibrationData" kindref="compound">ThreadCalibrationData&lt;Solo12&gt;</ref><sp/><ref refid="structblmc__robots_1_1ThreadCalibrationData" kindref="compound">ThreadCalibrationData_t</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>THREAD_FUNCTION_RETURN_TYPE<sp/>control_loop(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>thread_data_void_ptr)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structblmc__robots_1_1ThreadCalibrationData" kindref="compound">ThreadCalibrationData_t</ref>*<sp/>thread_data_ptr<sp/>=</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structblmc__robots_1_1ThreadCalibrationData" kindref="compound">ThreadCalibrationData_t</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(thread_data_void_ptr));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common__header_8hpp_1a80313eb420184518596e745eecf4b494" kindref="member">blmc_robots::Vector12d</ref><sp/>joint_index_to_zero<sp/>=<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread_data_ptr-&gt;joint_index_to_zero;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_data_ptr-&gt;robot-&gt;calibrate(joint_index_to_zero);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>CTRL_C_DETECTED<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>THREAD_FUNCTION_RETURN_VALUE;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>control_loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_ctrl_c();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(argc<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>number<sp/>of<sp/>argument:<sp/>`./demo_solo12_calibration<sp/>network_id`.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Solo12&gt;<sp/>robot<sp/>=<sp/>std::make_shared&lt;Solo12&gt;();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>robot-&gt;initialize(argv[1]);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structblmc__robots_1_1ThreadCalibrationData" kindref="compound">ThreadCalibrationData_t</ref><sp/>thread_data(robot);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;Controller<sp/>is<sp/>set<sp/>up.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;Press<sp/>enter<sp/>to<sp/>launch<sp/>the<sp/>calibration.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[256];</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cin.get(str,<sp/>256);<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>c-string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>real_time_tools::RealTimeThread<sp/>thread;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>thread.create_realtime_thread(&amp;control_loop,<sp/>&amp;thread_data);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>the<sp/>application<sp/>is<sp/>killed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>thread.join();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;Exit<sp/>cleanly.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="demos/demo_solo12_calibration.cpp"/>
  </compounddef>
</doxygen>
