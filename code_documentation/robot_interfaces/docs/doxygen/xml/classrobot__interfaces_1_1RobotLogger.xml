<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classrobot__interfaces_1_1RobotLogger" kind="class" language="C++" prot="public">
    <compoundname>robot_interfaces::RobotLogger</compoundname>
    <includes refid="robot__logger_8hpp" local="no">robot_logger.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classAction" kindref="compound">Action</ref></type>
      </param>
      <param>
        <type>typename <ref refid="classObservation" kindref="compound">Observation</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1ad1391bc38ff516f01b3c8bdd91e27efc" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classrobot__interfaces_1_1RobotData" kindref="compound">robot_interfaces::RobotData</ref>&lt; <ref refid="classAction" kindref="compound">Action</ref>, <ref refid="classObservation" kindref="compound">Observation</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;robot_interfaces::RobotData&lt;Action, Observation&gt; &gt; robot_interfaces::RobotLogger&lt; Action, Observation &gt;::logger_data_</definition>
        <argsstring></argsstring>
        <name>logger_data_</name>
        <briefdescription>
<para>This is to verify that the template types of the <ref refid="classrobot__interfaces_1_1RobotLogger" kindref="compound">RobotLogger</ref> are based on <ref refid="classrobot__interfaces_1_1Loggable" kindref="compound">Loggable</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Currently, the level of generalisability of the logger is that we <emphasis>know</emphasis> the following four timeseries structures exist for <emphasis>any</emphasis> robot whose data is to be logged- applied_action and desired_action (of type <ref refid="classAction" kindref="compound">Action</ref>), observation (of type <ref refid="classObservation" kindref="compound">Observation</ref>), and status (of type <ref refid="structrobot__interfaces_1_1Status" kindref="compound">Status</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="63" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1a0465f86efac78a429f8980bd2a12959e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int robot_interfaces::RobotLogger&lt; Action, Observation &gt;::block_size_</definition>
        <argsstring></argsstring>
        <name>block_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="65" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1ac47398855bcb94ca8a3e83334ee1d382" prot="public" static="no" mutable="no">
        <type>long int</type>
        <definition>long int robot_interfaces::RobotLogger&lt; Action, Observation &gt;::index_</definition>
        <argsstring></argsstring>
        <name>index_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="66" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1a133c310dcabe26cb8918dad08ed96a90" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool robot_interfaces::RobotLogger&lt; Action, Observation &gt;::stop_was_called_</definition>
        <argsstring></argsstring>
        <name>stop_was_called_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="68" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1aa03a18fb24545744533c39e193c5920a" prot="public" static="no" mutable="no">
        <type>std::ofstream</type>
        <definition>std::ofstream robot_interfaces::RobotLogger&lt; Action, Observation &gt;::output_file_</definition>
        <argsstring></argsstring>
        <name>output_file_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="70" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1a180a1ad565fd1a2342c6a40465fea731" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string robot_interfaces::RobotLogger&lt; Action, Observation &gt;::output_file_name_</definition>
        <argsstring></argsstring>
        <name>output_file_name_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="71" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrobot__interfaces_1_1RobotLogger_1a6a9d7845a73b1d62d0f0ddf85240c336" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; real_time_tools::RealTimeThread &gt;</type>
        <definition>std::shared_ptr&lt;real_time_tools::RealTimeThread&gt; robot_interfaces::RobotLogger&lt; Action, Observation &gt;::thread_</definition>
        <argsstring></argsstring>
        <name>thread_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="343" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="343" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a40fbf613d2fd5a54dfd71a0dde9da616" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>robot_interfaces::RobotLogger&lt; Action, Observation &gt;::RobotLogger</definition>
        <argsstring>(std::shared_ptr&lt; robot_interfaces::RobotData&lt; Action, Observation &gt;&gt; robot_data, int block_size)</argsstring>
        <name>RobotLogger</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrobot__interfaces_1_1RobotData" kindref="compound">robot_interfaces::RobotData</ref>&lt; <ref refid="classAction" kindref="compound">Action</ref>, <ref refid="classObservation" kindref="compound">Observation</ref> &gt;&gt;</type>
          <declname>robot_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="73" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="73" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1aaa91bf14d3de20fed756c8aa5d60c5c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual robot_interfaces::RobotLogger&lt; Action, Observation &gt;::~RobotLogger</definition>
        <argsstring>()</argsstring>
        <name>~RobotLogger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="84" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1aff9a4e9a91b3fe604bd16a94a006e151" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; robot_interfaces::RobotLogger&lt; Action, Observation &gt;::get_header</definition>
        <argsstring>()</argsstring>
        <name>get_header</name>
        <briefdescription>
<para>To get the title of the log file, describing all the information that will be logged in it. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>header The title of the log file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="95" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="95" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a7c94db4517002755f3325c13aa430733" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::append_name_to_header</definition>
        <argsstring>(std::string identifier, std::vector&lt; std::string &gt; field_name, std::vector&lt; std::vector&lt; double &gt;&gt; field_data, std::vector&lt; std::string &gt; &amp;header)</argsstring>
        <name>append_name_to_header</name>
        <param>
          <type>std::string</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>field_name</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt;</type>
          <declname>field_data</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Fills in the name information of each field to be logged according to the size of the field. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure the field corresponds to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The field data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&amp;header</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the header of the log file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="142" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="142" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a8c7c9b7bff6e49b340c90b36bee9331e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::append_header_to_file</definition>
        <argsstring>()</argsstring>
        <name>append_header_to_file</name>
        <briefdescription>
<para>Writes the header to the log file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="169" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="169" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1ac568cd79a651c2c20fa9e1f136155ced" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::append_robot_data_to_file</definition>
        <argsstring>()</argsstring>
        <name>append_robot_data_to_file</name>
        <briefdescription>
<para>Writes the timestamped robot data at <emphasis>hopefully</emphasis> every time index to the log file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="186" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="186" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a70c988142c9ccbdc0c81b0bcc689031e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::append_field_data_to_file</definition>
        <argsstring>(std::vector&lt; std::vector&lt; double &gt;&gt; field_data)</argsstring>
        <name>append_field_data_to_file</name>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt;</type>
          <declname>field_data</declname>
        </param>
        <briefdescription>
<para>Appends the data corresponding to every field at the same time index to the log file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The field data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="243" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="243" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a8dc63e66127923cfee3a2ddaf764da86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::write</definition>
        <argsstring>()</argsstring>
        <name>write</name>
        <briefdescription>
<para>Writes everything to the log file. </para>        </briefdescription>
        <detaileddescription>
<para>It dumps all the data corresponding to block_size_ number of time indices at one go. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="265" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="265" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a9abfad073fd735b9873b4b3f19f268e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::start</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>start</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Call <ref refid="classrobot__interfaces_1_1RobotLogger_1a9abfad073fd735b9873b4b3f19f268e0" kindref="member">start()</ref> to create the thread for the <ref refid="classrobot__interfaces_1_1RobotLogger" kindref="compound">RobotLogger</ref> and start logging! </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Every time you start the logger with the same file name, it will obviously append newer data to the same file. This shouldn&apos;t be a problem. But for different log files, specify different file names while starting the logger.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the log file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="326" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="326" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a55ec7dcacd849adee53fa49a2a0c8234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robot_interfaces::RobotLogger&lt; Action, Observation &gt;::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Call <ref refid="classrobot__interfaces_1_1RobotLogger_1a55ec7dcacd849adee53fa49a2a0c8234" kindref="member">stop()</ref> when you want to stop logging. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="335" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="335" bodyend="340"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrobot__interfaces_1_1RobotLogger_1a909c3baf8d34945085fee9c45e9d80c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* robot_interfaces::RobotLogger&lt; Action, Observation &gt;::write</definition>
        <argsstring>(void *instance_pointer)</argsstring>
        <name>write</name>
        <param>
          <type>void *</type>
          <declname>instance_pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/robot_interfaces/robot_logger.hpp" line="253" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="253" bodyend="257"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>To log data from <emphasis>any</emphasis> robot (real, simulated, fake). </para>    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classrobot__interfaces_1_1RobotLogger" kindref="compound">RobotLogger</ref> logs the timestamp, the time index, and the values of every <ref refid="classObservation" kindref="compound">Observation</ref>, <ref refid="classAction" kindref="compound">Action</ref>, and <ref refid="structrobot__interfaces_1_1Status" kindref="compound">Status</ref> variable. <ref refid="classObservation" kindref="compound">Observation</ref>, <ref refid="classAction" kindref="compound">Action</ref>, and <ref refid="structrobot__interfaces_1_1Status" kindref="compound">Status</ref> <emphasis>must</emphasis> derive from <ref refid="classrobot__interfaces_1_1Loggable" kindref="compound">Loggable</ref>. Any further data structure can be logged similarly, which derives from <ref refid="classrobot__interfaces_1_1Loggable" kindref="compound">Loggable</ref>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classAction" kindref="compound">Action</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classObservation" kindref="compound">Observation</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="include/robot_interfaces/robot_logger.hpp" line="44" column="1" bodyfile="include/robot_interfaces/robot_logger.hpp" bodystart="43" bodyend="344"/>
    <listofallmembers>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a70c988142c9ccbdc0c81b0bcc689031e" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>append_field_data_to_file</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a8c7c9b7bff6e49b340c90b36bee9331e" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>append_header_to_file</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a7c94db4517002755f3325c13aa430733" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>append_name_to_header</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1ac568cd79a651c2c20fa9e1f136155ced" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>append_robot_data_to_file</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a0465f86efac78a429f8980bd2a12959e" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>block_size_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1aff9a4e9a91b3fe604bd16a94a006e151" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>get_header</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1ac47398855bcb94ca8a3e83334ee1d382" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>index_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1ad1391bc38ff516f01b3c8bdd91e27efc" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>logger_data_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1aa03a18fb24545744533c39e193c5920a" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>output_file_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a180a1ad565fd1a2342c6a40465fea731" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>output_file_name_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a40fbf613d2fd5a54dfd71a0dde9da616" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>RobotLogger</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a9abfad073fd735b9873b4b3f19f268e0" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>start</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a55ec7dcacd849adee53fa49a2a0c8234" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>stop</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a133c310dcabe26cb8918dad08ed96a90" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>stop_was_called_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a6a9d7845a73b1d62d0f0ddf85240c336" prot="private" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>thread_</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a909c3baf8d34945085fee9c45e9d80c4" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>write</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1a8dc63e66127923cfee3a2ddaf764da86" prot="public" virt="non-virtual"><scope>robot_interfaces::RobotLogger</scope><name>write</name></member>
      <member refid="classrobot__interfaces_1_1RobotLogger_1aaa91bf14d3de20fed756c8aa5d60c5c3" prot="public" virt="virtual"><scope>robot_interfaces::RobotLogger</scope><name>~RobotLogger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
